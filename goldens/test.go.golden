Name: test_files
Definition (definition.package):
package test_files

Name: Pattern0
Doc:
// Pattern 0.
Definition (definition.class):
type Pattern0 struct {
	a string
}

Name: Pattern1
Doc:
// Pattern 1.
Definition (definition.interface):
type Pattern1 interface {
	// Hi
	a() string
}

Name: a
Doc:
// Hi
Declaration (definition.method):
a() string
Lineage: [Pattern1]
Lineage types: [interface]

Name: Pattern2
Definition (definition.function):
func Pattern2() {}

Name: Method
Doc:
// Comments
// here.
Definition (definition.method):
func (p *Pattern0) Method(string) {}
Metadata:
    khulnasoft.lineage = *Pattern0
    khulnasoft.lineage_type = class

Name: Method2
Definition (definition.method):
func (p Pattern0) Method2(a string) string {
	Pattern2()
	s := &Pattern0{a: "foo"}
	s.Method("")
	((*Pattern0)(s)).Method("")
	var s2 any
	s2.(*Pattern0).Method("")
	return a
}
Metadata:
    khulnasoft.lineage = Pattern0
    khulnasoft.lineage_type = class

Name: Pattern2
Reference (reference.call):
Pattern2()

Name: Pattern0
Reference (reference.class):
Pattern0{a: "foo"}

Name: Method
Parent: s
Reference (reference.call):
s.Method("")

Name: Method
Reference (reference.call):
((*Pattern0)(s)).Method("")

Name: Method
Reference (reference.call):
s2.(*Pattern0).Method("")

Name: Alias
Definition (definition.type):
Alias string
